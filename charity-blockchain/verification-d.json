{
    "language": "Solidity",
    "sources": {
        "@openzeppelin/contracts/access/Ownable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
        },
        "@openzeppelin/contracts/security/Pausable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
        },
        "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
        },
        "contracts/donation.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n\ninterface IDonationNFT {\n    function mintDonationNFT(\n        address _donor,\n        uint256 _amount,\n        uint256 _campaignId,\n        string memory _campaignName\n    ) external returns (uint256);\n}\n\n/**\n * @title Donation\n * @dev Основной контракт для управления благотворительными кампаниями\n */\ncontract Donation is Ownable, ReentrancyGuard, Pausable {\n\n    uint256 public totalDonations;\n    uint256 public campaignCount;\n    \n\n    address public nftContract;\n    \n\n    uint256 public constant MIN_DONATION_FOR_NFT = 0.01 ether;\n    \n\n    address public treasuryAddress;\n    uint256 public platformFee = 100; // 1% по умолчанию\n    uint256 public constant MAX_PLATFORM_FEE = 200; // 2%\n    uint256 public totalFeesCollected;\n    \n\n    struct Campaign {\n        string name;\n        string description;\n        uint256 goal;\n        uint256 raised;\n        uint256 deadline;\n        address beneficiary;\n        bool active;\n        bool fundsWithdrawn;\n    }\n    \n    struct DonationInfo {\n        address donor;\n        uint256 amount;\n        uint256 timestamp;\n        uint256 campaignId;\n        uint256 nftTokenId;\n    }\n    \n\n    mapping(uint256 => Campaign) public campaigns;\n    DonationInfo[] public allDonations;\n    mapping(address => uint256[]) public donorHistory;\n    \n\n    event CampaignCreated(uint256 indexed campaignId, string name, uint256 goal, uint256 deadline);\n    event DonationReceived(address indexed donor, uint256 indexed campaignId, uint256 amount);\n    event CampaignCompleted(uint256 indexed campaignId, uint256 totalRaised);\n    event FundsWithdrawn(uint256 indexed campaignId, address beneficiary, uint256 amount);\n    event NFTContractUpdated(address indexed newNFTContract);\n    event PlatformFeeUpdated(uint256 newFee);\n    event TreasuryAddressUpdated(address newTreasury);\n    event FeeCollected(uint256 campaignId, uint256 feeAmount);\n    event EmergencyWithdraw(address to, uint256 amount);\n    \n    constructor(address _treasuryAddress) {\n        require(_treasuryAddress != address(0), \"Invalid treasury address\");\n        treasuryAddress = _treasuryAddress;\n    }\n    \n\n    \n    /**\n     * @dev Установить адрес NFT контракта\n     */\n    function setNFTContract(address _nftContract) external onlyOwner {\n        require(_nftContract != address(0), \"Invalid NFT contract\");\n        nftContract = _nftContract;\n        emit NFTContractUpdated(_nftContract);\n    }\n    \n    /**\n     * @dev Обновить адрес казначейства\n     */\n    function setTreasuryAddress(address _treasuryAddress) external onlyOwner {\n        require(_treasuryAddress != address(0), \"Invalid treasury address\");\n        treasuryAddress = _treasuryAddress;\n        emit TreasuryAddressUpdated(_treasuryAddress);\n    }\n    \n    /**\n     * @dev Обновить комиссию платформы\n     */\n    function setPlatformFee(uint256 _fee) external onlyOwner {\n        require(_fee <= MAX_PLATFORM_FEE, \"Fee exceeds maximum\");\n        platformFee = _fee;\n        emit PlatformFeeUpdated(_fee);\n    }\n    \n    /**\n     * @dev Приостановить контракт\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n    \n    /**\n     * @dev Возобновить работу контракта\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n    \n    // ============ Основные функции ============\n    \n    /**\n     * @dev Создать новую кампанию\n     */\n    function createCampaign(\n        string memory _name,\n        string memory _description,\n        uint256 _goal,\n        uint256 _durationInDays,\n        address _beneficiary\n    ) public onlyOwner whenNotPaused returns (uint256) {\n        require(_goal > 0, \"Goal must be greater than 0\");\n        require(_durationInDays > 0, \"Duration must be greater than 0\");\n        require(_beneficiary != address(0), \"Invalid beneficiary address\");\n        require(bytes(_name).length > 0, \"Name cannot be empty\");\n        require(bytes(_description).length > 0, \"Description cannot be empty\");\n        \n        uint256 campaignId = campaignCount++;\n        \n        campaigns[campaignId] = Campaign({\n            name: _name,\n            description: _description,\n            goal: _goal,\n            raised: 0,\n            deadline: block.timestamp + (_durationInDays * 1 days),\n            beneficiary: _beneficiary,\n            active: true,\n            fundsWithdrawn: false\n        });\n        \n        emit CampaignCreated(campaignId, _name, _goal, campaigns[campaignId].deadline);\n        \n        return campaignId;\n    }\n    \n    /**\n     * @dev Сделать пожертвование в кампанию\n     */\n    function donateToCampaign(uint256 _campaignId) \n        public \n        payable \n        nonReentrant \n        whenNotPaused \n    {\n        require(msg.value > 0, \"Donation must be greater than 0\");\n        require(_campaignId < campaignCount, \"Campaign does not exist\");\n        \n        Campaign storage campaign = campaigns[_campaignId];\n        require(campaign.active, \"Campaign is not active\");\n        require(block.timestamp < campaign.deadline, \"Campaign has ended\");\n        \n        // Рассчитываем комиссию\n        uint256 feeAmount = (msg.value * platformFee) / 10000;\n        uint256 netDonation = msg.value - feeAmount;\n        \n        // Обновляем суммы\n        campaign.raised += netDonation;\n        totalDonations += msg.value;\n        totalFeesCollected += feeAmount;\n        \n        // Переводим комиссию в казначейство\n        if (feeAmount > 0) {\n            (bool feeSuccess, ) = payable(treasuryAddress).call{value: feeAmount}(\"\");\n            require(feeSuccess, \"Fee transfer failed\");\n            emit FeeCollected(_campaignId, feeAmount);\n        }\n        \n        // Минтим NFT если донат достаточно большой и контракт установлен\n        uint256 nftTokenId = 0;\n        if (nftContract != address(0) && msg.value >= MIN_DONATION_FOR_NFT) {\n            try IDonationNFT(nftContract).mintDonationNFT(\n                msg.sender,\n                msg.value,\n                _campaignId,\n                campaign.name\n            ) returns (uint256 tokenId) {\n                nftTokenId = tokenId;\n            } catch {\n                // Если минтинг не удался, продолжаем без NFT\n                // Логируем ошибку через событие (в продакшене)\n            }\n        }\n        \n        // Сохраняем информацию о донате\n        DonationInfo memory newDonation = DonationInfo({\n            donor: msg.sender,\n            amount: msg.value,\n            timestamp: block.timestamp,\n            campaignId: _campaignId,\n            nftTokenId: nftTokenId\n        });\n        \n        allDonations.push(newDonation);\n        donorHistory[msg.sender].push(allDonations.length - 1);\n        \n        emit DonationReceived(msg.sender, _campaignId, msg.value);\n        \n        // Проверяем, достигнута ли цель\n        if (campaign.raised >= campaign.goal) {\n            campaign.active = false;\n            emit CampaignCompleted(_campaignId, campaign.raised);\n        }\n    }\n    \n    /**\n     * @dev Вывести средства из кампании\n     */\n    function withdrawCampaignFunds(uint256 _campaignId) \n        public \n        nonReentrant \n        whenNotPaused \n    {\n        require(_campaignId < campaignCount, \"Campaign does not exist\");\n        \n        Campaign storage campaign = campaigns[_campaignId];\n        require(msg.sender == campaign.beneficiary || msg.sender == owner(), \"Not authorized\");\n        require(!campaign.fundsWithdrawn, \"Funds already withdrawn\");\n        require(campaign.raised > 0, \"No funds to withdraw\");\n        require(!campaign.active || block.timestamp > campaign.deadline, \"Campaign still active\");\n        \n        uint256 amount = campaign.raised;\n        campaign.fundsWithdrawn = true;\n        \n        (bool success, ) = payable(campaign.beneficiary).call{value: amount}(\"\");\n        require(success, \"Withdrawal failed\");\n        \n        emit FundsWithdrawn(_campaignId, campaign.beneficiary, amount);\n    }\n    \n    /**\n     * @dev Экстренная остановка кампании\n     */\n    function stopCampaign(uint256 _campaignId) public onlyOwner {\n        require(_campaignId < campaignCount, \"Campaign does not exist\");\n        campaigns[_campaignId].active = false;\n    }\n    \n    /**\n     * @dev Экстренный вывод средств (только владелец, только в крайнем случае)\n     */\n    function emergencyWithdraw(address _to) external onlyOwner {\n        require(_to != address(0), \"Invalid address\");\n        uint256 balance = address(this).balance;\n        require(balance > 0, \"No funds to withdraw\");\n        \n        (bool success, ) = payable(_to).call{value: balance}(\"\");\n        require(success, \"Emergency withdrawal failed\");\n        \n        emit EmergencyWithdraw(_to, balance);\n    }\n    \n    // ============ View функции ============\n    \n    /**\n     * @dev Получить информацию о кампании\n     */\n    function getCampaignInfo(uint256 _campaignId) public view returns (\n        string memory name,\n        string memory description,\n        uint256 goal,\n        uint256 raised,\n        uint256 deadline,\n        bool active,\n        address beneficiary\n    ) {\n        require(_campaignId < campaignCount, \"Campaign does not exist\");\n        Campaign memory campaign = campaigns[_campaignId];\n        \n        return (\n            campaign.name,\n            campaign.description,\n            campaign.goal,\n            campaign.raised,\n            campaign.deadline,\n            campaign.active,\n            campaign.beneficiary\n        );\n    }\n    \n    /**\n     * @dev Получить историю донатов пользователя\n     */\n    function getDonorHistory(address _donor) public view returns (DonationInfo[] memory) {\n        uint256[] memory donationIndices = donorHistory[_donor];\n        DonationInfo[] memory donations = new DonationInfo[](donationIndices.length);\n        \n        for (uint256 i = 0; i < donationIndices.length; i++) {\n            donations[i] = allDonations[donationIndices[i]];\n        }\n        \n        return donations;\n    }\n    \n    /**\n     * @dev Получить активные кампании\n     */\n    function getActiveCampaigns() public view returns (uint256[] memory) {\n        uint256 activeCount = 0;\n        \n        // Считаем количество активных кампаний\n        for (uint256 i = 0; i < campaignCount; i++) {\n            if (campaigns[i].active && block.timestamp < campaigns[i].deadline) {\n                activeCount++;\n            }\n        }\n        \n        // Создаем массив и заполняем\n        uint256[] memory activeCampaignIds = new uint256[](activeCount);\n        uint256 currentIndex = 0;\n        \n        for (uint256 i = 0; i < campaignCount; i++) {\n            if (campaigns[i].active && block.timestamp < campaigns[i].deadline) {\n                activeCampaignIds[currentIndex] = i;\n                currentIndex++;\n            }\n        }\n        \n        return activeCampaignIds;\n    }\n    \n    /**\n     * @dev Получить баланс контракта\n     */\n    function getBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n    \n    /**\n     * @dev Получить общую информацию о платформе\n     */\n    function getPlatformStats() public view returns (\n        uint256 _totalDonations,\n        uint256 _totalFeesCollected,\n        uint256 _campaignCount,\n        uint256 _currentBalance\n    ) {\n        return (\n            totalDonations,\n            totalFeesCollected,\n            campaignCount,\n            address(this).balance\n        );\n    }\n    \n    // Защита от случайных переводов\n    receive() external payable {\n        revert(\"Please use donateToCampaign function\");\n    }\n    \n    fallback() external payable {\n        revert(\"Please use donateToCampaign function\");\n    }\n}"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "viaIR": true,
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata"
                ],
                "": [
                    "ast"
                ]
            }
        }
    }
}